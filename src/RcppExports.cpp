// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// mvn_logllk_diagCPP
double mvn_logllk_diagCPP(NumericVector x, NumericVector mu, NumericVector sgma);
RcppExport SEXP _diem_mvn_logllk_diagCPP(SEXP xSEXP, SEXP muSEXP, SEXP sgmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sgma(sgmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvn_logllk_diagCPP(x, mu, sgma));
    return rcpp_result_gen;
END_RCPP
}
// fraction_logCPP
NumericVector fraction_logCPP(NumericVector x);
RcppExport SEXP _diem_fraction_logCPP(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fraction_logCPP(x));
    return rcpp_result_gen;
END_RCPP
}
// sum_logCPP
double sum_logCPP(NumericVector x);
RcppExport SEXP _diem_sum_logCPP(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_logCPP(x));
    return rcpp_result_gen;
END_RCPP
}
// e_stepCPP
NumericMatrix e_stepCPP(NumericMatrix x, int k, List mu, List sgma, NumericVector tau, bool semisup, NumericVector labels);
RcppExport SEXP _diem_e_stepCPP(SEXP xSEXP, SEXP kSEXP, SEXP muSEXP, SEXP sgmaSEXP, SEXP tauSEXP, SEXP semisupSEXP, SEXP labelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< List >::type mu(muSEXP);
    Rcpp::traits::input_parameter< List >::type sgma(sgmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type semisup(semisupSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type labels(labelsSEXP);
    rcpp_result_gen = Rcpp::wrap(e_stepCPP(x, k, mu, sgma, tau, semisup, labels));
    return rcpp_result_gen;
END_RCPP
}
// get_llkCPP
double get_llkCPP(NumericMatrix x, List mu, List sgma, NumericVector tau, bool semisup, NumericVector labels);
RcppExport SEXP _diem_get_llkCPP(SEXP xSEXP, SEXP muSEXP, SEXP sgmaSEXP, SEXP tauSEXP, SEXP semisupSEXP, SEXP labelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type mu(muSEXP);
    Rcpp::traits::input_parameter< List >::type sgma(sgmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type semisup(semisupSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type labels(labelsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_llkCPP(x, mu, sgma, tau, semisup, labels));
    return rcpp_result_gen;
END_RCPP
}
// fast_varCPP
NumericVector fast_varCPP(Eigen::SparseMatrix<double> x, NumericVector mu);
RcppExport SEXP _diem_fast_varCPP(SEXP xSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_varCPP(x, mu));
    return rcpp_result_gen;
END_RCPP
}
// fast_row_scaleCPP
Eigen::MatrixXd fast_row_scaleCPP(Eigen::SparseMatrix<double> x, NumericVector mu, NumericVector sigma_sq);
RcppExport SEXP _diem_fast_row_scaleCPP(SEXP xSEXP, SEXP muSEXP, SEXP sigma_sqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_sq(sigma_sqSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_row_scaleCPP(x, mu, sigma_sq));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_diem_mvn_logllk_diagCPP", (DL_FUNC) &_diem_mvn_logllk_diagCPP, 3},
    {"_diem_fraction_logCPP", (DL_FUNC) &_diem_fraction_logCPP, 1},
    {"_diem_sum_logCPP", (DL_FUNC) &_diem_sum_logCPP, 1},
    {"_diem_e_stepCPP", (DL_FUNC) &_diem_e_stepCPP, 7},
    {"_diem_get_llkCPP", (DL_FUNC) &_diem_get_llkCPP, 6},
    {"_diem_fast_varCPP", (DL_FUNC) &_diem_fast_varCPP, 2},
    {"_diem_fast_row_scaleCPP", (DL_FUNC) &_diem_fast_row_scaleCPP, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_diem(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
